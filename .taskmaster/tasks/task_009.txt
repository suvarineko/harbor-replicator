# Task ID: 9
# Title: Implement Health and Readiness Endpoints
# Status: pending
# Dependencies: 1, 7
# Priority: medium
# Description: Create HTTP endpoints for health checks and readiness probes compatible with Kubernetes deployments
# Details:
```go
// internal/monitoring/health.go
type HealthServer struct {
    engine *sync.SyncEngine
    stateManager *state.StateManager
    startTime time.Time
    logger *zap.Logger
}

func (h *HealthServer) SetupRoutes() *gin.Engine {
    router := gin.New()
    router.Use(gin.Recovery())
    
    router.GET("/health", h.healthHandler)
    router.GET("/ready", h.readyHandler)
    
    return router
}

func (h *HealthServer) healthHandler(c *gin.Context) {
    uptime := time.Since(h.startTime).Seconds()
    
    c.JSON(http.StatusOK, gin.H{
        "status": "healthy",
        "version": "1.0.0",
        "uptime": uptime,
    })
}

func (h *HealthServer) readyHandler(c *gin.Context) {
    // Check if sync engine is ready
    ready := h.engine.IsReady()
    lastSync := h.stateManager.GetLastSyncTime()
    sourcesConnected := h.engine.GetConnectedSources()
    
    if !ready {
        c.JSON(http.StatusServiceUnavailable, gin.H{
            "ready": false,
            "reason": "sync engine not ready",
        })
        return
    }
    
    c.JSON(http.StatusOK, gin.H{
        "ready": true,
        "last_sync": lastSync,
        "sources_connected": sourcesConnected,
    })
}
```

# Test Strategy:
Test health endpoint always returns 200 OK, test readiness endpoint returns 503 when not ready, verify JSON response format matches specification

# Subtasks:
## 1. Create Health Check Service Structure [pending]
### Dependencies: None
### Description: Set up the base health check service with proper initialization, configuration, and dependency injection for monitoring various system components
### Details:
Create HealthServer struct in internal/monitoring/health.go with fields for sync engine, state manager, logger, and configuration. Implement NewHealthServer constructor that accepts dependencies and initializes the service with proper defaults. Add configuration structure for health check intervals, timeouts, and thresholds. Include fields for tracking component health states and last check timestamps.

## 2. Implement Component Health Checkers [pending]
### Dependencies: 9.1
### Description: Create individual health check functions for each critical system component including database connections, sync engine status, and external service connectivity
### Details:
Implement checkDatabaseHealth() to verify database connectivity and query execution. Create checkSyncEngineHealth() to validate sync engine state, active workers, and queue status. Add checkExternalServicesHealth() for checking connectivity to external APIs or services. Each checker should return a ComponentHealth struct with status (healthy/unhealthy/degraded), last check time, error message if any, and relevant metrics. Implement timeout handling for each check to prevent hanging.

## 3. Build Health Endpoint Handler [pending]
### Dependencies: 9.2
### Description: Implement the /health endpoint that performs basic liveness checks and returns overall system health status with detailed component information
### Details:
Create healthHandler that executes all component health checks concurrently using goroutines. Aggregate results to determine overall health status (healthy if all components healthy, degraded if some unhealthy, unhealthy if critical components fail). Return JSON response with overall status, individual component statuses, version info, uptime, and timestamp. Include response caching to prevent excessive health checks. Set appropriate HTTP status codes (200 for healthy/degraded, 503 for unhealthy).

## 4. Build Readiness Endpoint Handler [pending]
### Dependencies: 9.2
### Description: Implement the /ready endpoint that checks if the application is ready to serve traffic, including verification of critical dependencies and initialization state
### Details:
Create readyHandler that checks if sync engine is initialized and ready to process requests. Verify database schema migrations are complete and connections are established. Check if minimum number of sync workers are running. Validate that state manager is initialized with valid state. Include checks for required external service connections. Return detailed readiness status with specific failure reasons if not ready. Implement grace period after startup before reporting ready.

## 5. Configure HTTP Server and Kubernetes Integration [pending]
### Dependencies: 9.3, 9.4
### Description: Set up the HTTP server for health endpoints with proper routing, middleware, and Kubernetes-compatible configuration including probe settings
### Details:
Configure Gin router with health and readiness endpoints on a separate port (e.g., 8080) from main application. Add middleware for request logging, panic recovery, and timeout handling. Implement graceful shutdown handling that updates health status during shutdown. Add Prometheus metrics for health check results and latencies. Create Kubernetes deployment manifests with proper liveness and readiness probe configurations including initialDelaySeconds, periodSeconds, timeoutSeconds, and failureThreshold. Document recommended probe settings for different deployment scenarios.

