# Task ID: 4
# Title: Implement State Manager
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create a state management system to track synchronization progress and maintain resource mappings between Harbor instances
# Details:
```go
// internal/state/manager.go
type StateManager struct {
    mu sync.RWMutex
    state *SyncState
    filePath string
    logger *zap.Logger
}

type SyncState struct {
    LastSync map[string]time.Time `json:"last_sync"`
    ResourceMappings map[string]ResourceMapping `json:"resource_mappings"`
    SyncErrors []SyncError `json:"sync_errors"`
}

func NewStateManager(filePath string, logger *zap.Logger) (*StateManager, error) {
    sm := &StateManager{
        filePath: filePath,
        logger: logger,
    }
    
    if err := sm.Load(); err != nil {
        if !os.IsNotExist(err) {
            return nil, err
        }
        sm.state = &SyncState{
            LastSync: make(map[string]time.Time),
            ResourceMappings: make(map[string]ResourceMapping),
        }
    }
    
    return sm, nil
}

func (sm *StateManager) Save() error {
    sm.mu.RLock()
    defer sm.mu.RUnlock()
    
    data, err := json.MarshalIndent(sm.state, "", "  ")
    if err != nil {
        return err
    }
    
    return os.WriteFile(sm.filePath, data, 0644)
}
```

# Test Strategy:
Unit tests for state persistence and recovery, concurrent access tests, corruption recovery tests, and performance tests with large state files

# Subtasks:
## 1. Define Core State Data Structures [pending]
### Dependencies: None
### Description: Create the complete data structures for StateManager including ResourceMapping, SyncError, and extend SyncState with additional fields for tracking sync operations
### Details:
Define ResourceMapping struct with fields like SourceID, TargetID, ResourceType, and LastModified. Define SyncError struct with Timestamp, ResourceType, ResourceID, Error message, and Retry count. Extend SyncState to include SyncInProgress flag, CurrentSyncID, and ResourceVersions map for tracking resource versions

## 2. Implement State Persistence Methods [pending]
### Dependencies: 4.1
### Description: Implement Load() and Save() methods with atomic file operations, backup creation, and error recovery mechanisms
### Details:
Implement Load() to read state from disk with JSON unmarshaling and validation. Enhance Save() with atomic write using temporary file and rename, create backup before save, implement file locking to prevent concurrent writes, and add compression support for large state files

## 3. Create Resource Mapping Management Methods [pending]
### Dependencies: 4.1
### Description: Implement methods to add, update, retrieve, and delete resource mappings between source and target Harbor instances
### Details:
Implement AddMapping(), UpdateMapping(), GetMapping(), DeleteMapping(), and GetMappingsByType() methods. Include validation for duplicate mappings, orphaned mappings cleanup, and mapping conflict resolution. Add methods for bulk operations and mapping queries

## 4. Implement Sync Progress Tracking [pending]
### Dependencies: 4.1
### Description: Create methods to track and update synchronization progress including start, update, and completion of sync operations
### Details:
Implement StartSync(), UpdateSyncProgress(), CompleteSyncForResource(), and FailSyncForResource() methods. Add progress percentage calculation, estimated time remaining, resource-level progress tracking, and sync history maintenance with configurable retention

## 5. Add Error Handling and Recovery Methods [pending]
### Dependencies: 4.1, 4.4
### Description: Implement comprehensive error tracking, retry logic, and state recovery mechanisms for failed synchronizations
### Details:
Implement RecordError(), GetErrors(), ClearErrors(), and GetErrorsByResource() methods. Add exponential backoff retry logic, error categorization (transient vs permanent), automatic error cleanup based on age, and methods to analyze error patterns for alerting

## 6. Create State Query and Reporting Methods [pending]
### Dependencies: 4.3, 4.4, 4.5
### Description: Implement methods to query state information and generate synchronization reports for monitoring and debugging
### Details:
Implement GetSyncStatus(), GetLastSyncTime(), GetPendingResources(), GenerateSyncReport(), and GetResourceHistory() methods. Add filtering and pagination support, export functionality for different formats (JSON, CSV), metrics calculation (sync rate, error rate), and state validation/consistency checks

