# Task ID: 7
# Title: Create Synchronization Engine
# Status: pending
# Dependencies: 4, 5, 6
# Priority: high
# Description: Build the core synchronization orchestrator that manages sync cycles, coordinates resource synchronizers, and handles scheduling
# Details:
```go
// internal/sync/engine.go
type SyncEngine struct {
    config *config.Config
    robotSync *RobotAccountSynchronizer
    oidcSync *OIDCGroupSynchronizer
    stateManager *state.StateManager
    logger *zap.Logger
    ticker *time.Ticker
    done chan bool
}

func (e *SyncEngine) Start(ctx context.Context) error {
    e.ticker = time.NewTicker(time.Duration(e.config.Replicator.SyncInterval) * time.Second)
    e.done = make(chan bool)
    
    // Initial sync
    e.runSyncCycle(ctx)
    
    go func() {
        for {
            select {
            case <-e.ticker.C:
                e.runSyncCycle(ctx)
            case <-e.done:
                return
            case <-ctx.Done():
                return
            }
        }
    }()
    
    return nil
}

func (e *SyncEngine) runSyncCycle(ctx context.Context) {
    e.logger.Info("starting sync cycle")
    start := time.Now()
    
    var wg sync.WaitGroup
    for _, remote := range e.config.RemoteHarbors {
        if !remote.Enabled {
            continue
        }
        
        wg.Add(1)
        go func(source string) {
            defer wg.Done()
            
            if e.config.SyncResources.SystemRobotAccounts.Enabled {
                if err := e.robotSync.SyncSystemRobots(ctx, source); err != nil {
                    e.logger.Error("failed to sync system robots", zap.Error(err))
                }
            }
            
            if e.config.SyncResources.OIDCGroups.Enabled {
                if err := e.oidcSync.SyncGroups(ctx, source); err != nil {
                    e.logger.Error("failed to sync OIDC groups", zap.Error(err))
                }
            }
        }(remote.Name)
    }
    
    wg.Wait()
    e.logger.Info("sync cycle completed", zap.Duration("duration", time.Since(start)))
}
```

# Test Strategy:
Test concurrent synchronization from multiple sources, verify scheduling accuracy, test graceful shutdown, and measure sync cycle performance

# Subtasks:
## 1. Define Core Engine Interfaces and Types [pending]
### Dependencies: None
### Description: Create the foundational interfaces and types for the synchronization engine including SyncEngine struct, Synchronizer interface, and sync result types
### Details:
Define interfaces for resource synchronizers (Synchronizer interface with Sync method), create SyncResult struct to capture sync outcomes (success count, error count, duration), define SyncContext to pass sync-specific data, and create enums for sync status states

## 2. Implement Worker Pool for Concurrent Operations [pending]
### Dependencies: 7.1
### Description: Build a configurable worker pool to handle concurrent synchronization operations across multiple remote Harbor instances
### Details:
Create WorkerPool struct with configurable size, implement job queue using channels, add rate limiting per remote instance, include context cancellation support, and implement graceful shutdown mechanism

## 3. Create Sync Scheduler Component [pending]
### Dependencies: 7.1
### Description: Implement the scheduling mechanism that triggers sync cycles based on configured intervals and handles dynamic schedule updates
### Details:
Build Scheduler struct with ticker management, support for immediate sync triggers, implement schedule update without restart, add jitter to prevent thundering herd, and include next run time calculation

## 4. Build Sync Orchestrator Logic [pending]
### Dependencies: 7.1, 7.2, 7.3
### Description: Implement the core orchestration logic that coordinates different resource synchronizers and manages sync cycles
### Details:
Create runSyncCycle method with proper error handling, implement parallel sync for multiple remotes using worker pool, add sync cycle ID generation for tracking, implement pre and post sync hooks, and add circuit breaker pattern for failing remotes

## 5. Implement Sync Progress Tracking [pending]
### Dependencies: 7.4
### Description: Add real-time progress tracking and reporting capabilities for ongoing synchronization operations
### Details:
Create SyncProgress struct with current state tracking, implement progress updates via channels, add ETA calculation based on historical data, create progress aggregation for multiple resources, and implement progress persistence for recovery

## 6. Add Metrics and Monitoring Integration [pending]
### Dependencies: 7.4, 7.5
### Description: Integrate comprehensive metrics collection and monitoring capabilities into the sync engine
### Details:
Add Prometheus metrics for sync duration, success/failure counts, and queue depth, implement health check endpoint, create custom metrics for each resource type, add alerting thresholds configuration, and include sync lag measurement

## 7. Implement Engine Lifecycle Management [pending]
### Dependencies: 7.2, 7.3, 7.4
### Description: Build complete lifecycle management including initialization, startup, shutdown, and error recovery mechanisms
### Details:
Implement Start method with dependency validation, create Stop method with graceful shutdown, add Restart capability without data loss, implement health checks for dependencies, and add automatic recovery from transient failures

## 8. Create Engine Configuration and Validation [pending]
### Dependencies: 7.7
### Description: Implement comprehensive configuration management and validation for the sync engine with hot-reload support
### Details:
Build configuration validation for sync intervals and worker counts, implement configuration hot-reload without restart, add configuration versioning support, create sensible defaults with override capability, and implement configuration change notifications

