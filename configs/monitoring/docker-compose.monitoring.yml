version: '3.8'

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: harbor-replicator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-alerts.yml:/etc/prometheus/harbor-replicator-alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:9.2.0
    container_name: harbor-replicator-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Alertmanager for alert routing
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: harbor-replicator-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    restart: unless-stopped

  # Node Exporter for host metrics (optional)
  node-exporter:
    image: prom/node-exporter:v1.4.0
    container_name: harbor-replicator-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor for container metrics (optional)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: harbor-replicator-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  monitoring:
    driver: bridge

---
# Prometheus configuration file
# Save as: prometheus.yml
global:
  scrape_interval: 30s
  evaluation_interval: 30s

rule_files:
  - "harbor-replicator-alerts.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Harbor Replicator metrics
  - job_name: 'harbor-replicator'
    static_configs:
      - targets: ['host.docker.internal:8080']  # Adjust to your Harbor Replicator address
    scrape_interval: 30s
    metrics_path: /metrics
    scheme: http

  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Node Exporter metrics (optional)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  # cAdvisor metrics (optional)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']

---
# Alertmanager configuration file
# Save as: alertmanager.yml
global:
  smtp_smarthost: 'localhost:587'
  smtp_from: 'harbor-replicator@example.com'

route:
  group_by: ['alertname', 'service', 'severity']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'default-receiver'
  routes:
    - match:
        severity: critical
      receiver: 'critical-alerts'
    - match:
        severity: warning
      receiver: 'warning-alerts'

receivers:
  - name: 'default-receiver'
    # Default receiver (can be empty)

  - name: 'critical-alerts'
    # Configure for critical alerts (immediate notification)
    webhook_configs:
      - url: 'http://localhost:5001/alerts'
        send_resolved: true
    # email_configs:
    #   - to: 'ops-team@example.com'
    #     subject: '[CRITICAL] Harbor Replicator Alert'
    #     body: |
    #       {{ range .Alerts }}
    #       Alert: {{ .Annotations.summary }}
    #       Description: {{ .Annotations.description }}
    #       {{ end }}

  - name: 'warning-alerts'
    # Configure for warning alerts (less urgent)
    webhook_configs:
      - url: 'http://localhost:5001/alerts'
        send_resolved: true
    # slack_configs:
    #   - api_url: 'YOUR_SLACK_WEBHOOK_URL'
    #     channel: '#harbor-alerts'
    #     title: 'Harbor Replicator Warning'
    #     text: |
    #       {{ range .Alerts }}
    #       {{ .Annotations.summary }}
    #       {{ .Annotations.description }}
    #       {{ end }}

inhibit_rules:
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'service']